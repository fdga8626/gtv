#!/bin/bash

# git tag version
# A script to use git tags for repository version numbers through a simple CLI

################################################################################

# MIT License
#
# Copyright (c) 2017 Johannes Layher
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

################################################################################

# proper version information is assigned during build
GTV_VERSION="UNRELEASED"

################################################################################

# display help
function help
{
  echo "NAME
        git-tag-version

SYNOPSIS
        git-tag-version [command] [-m|--message=<message>] [-x|--suffix=<suffix>]
            [-s|--strict] [-n|--non-strict]

DESCRIPTION
        A script to use git tags for repository version numbers through a simple
        CLI.

        git-tag-version (gtv) is simple script to create git tags with a semantic
        versioning number scheme 'major.minor.patch', eg. 1.2.3. You may increase
        major, minor or patch number versions separately, or define a complete new
        'unrelated' version number as long as the number to be assigned is
        strictly increasing.

        By using the meta data of the git scm you omit the need to change your
        reporitories contents' if the version number changes. On the other hand
        meta data itself is not under version control, thus deleting tags or
        re-assigning tags with a similar version number to different commits is
        technically possible ('v1.2.3' vs. 'V1.2.3'). However, this is not
        possible if you stay with gtv to work on your version tags.

        The init command creates an initial 0.0.0 version tag. Use it on new
        repositories which are not using version tags yet.

        Do not get confused by the tag name and the version. Both are heavily
        related but not the same. But it is simple, the tag name equals the
        tag version prepended by a lower case letter v, like this:
          Tag Version:  1.2.45
          Tag Name:    v1.2.45

        You can apply a suffix to the tag version number. The given suffix is
        append to the tag version number after a additional dash like this:
          v0.1.9-MySuperSuffix
        Mind, gtv does support adding suffixes to tag names but does not interpret
        or derive meaning from suffixes. If you create a new patch version on a tag
        named 'v0.99.1-ALPHA' it will drop the suffix and simply perform the
        intended action, resulting in an new tag named 'v0.99.2'.
        For gtv there is no meaning in suffixes like 'alpha', 'beta', 'RC1' etc.

        Mind, assigning mulitple version tags to the same commit is possible
        by default. If you want to omit this behaviour use the strict-mode option.
        You can enable this strict-mode at all times by utilizing your git
        configuration like this 'git config gtv.strict-mode true'. You can
        temporarily disable strict-mode again by using the non-strict
        command line option. The appropriate git configuration value is nothing
        or 'git config gtv.strict-mode anything-but-true'. Since this is a plain
        git configuration it behaves absolutely the same, so pay attention if you
        use this setting on your local or gobal git configuration.
        See 'git help config' for details.

        If no explicit command is given gtv executes 'show'.

COMMANDS
        help
                Display this help text.

        init
                Initially create a 'v0.0.0' version tag. To be used on new
                repositories.

        show
                Show current version number.

        version
                Show version information of git-tag-version.

        new     <major|minor|patch> [-m|--message=<message>]
                [-x|--suffix=<suffix>] [-s|--strict]
                [-n|--non-strict]
                Create a new git version number tag by a simple increment to the
                given version part major, minor or patch.
                'gtv new major' on an existing v0.41.1  creates v1.0.0.
                'gtv new minor' on an existing v1.2.3   creates v1.3.0.
                'gtv new patch' on an existing v2.12.32 creates v2.12.33.

                Add the optional message to annotated tags. Add the optional tag
                suffixs as a suffix to the tag name itself. Do not allow
                assignment of mulitple version tags to the same commit using
                'strict'.

        set     <version> [-m|--message=<message>] [-x|--suffix=<suffix>]
                [-s|--strict] [-n|--non-strict]
                Assign a specific git version number tag, must be strictly
                increasing. Add the optional message to annotated tags. Add the
                optional tag suffix as a suffix to the tag name itself. Do not
                allow assignment of mulitple version tags to the same commit
                using 'strict'.

EXAMPLES
        # show current version, eg. 1.21.3
        gtv show
        # create a new tag with an increased minor version
        gtv new minor
        # show current version, eg. 1.22.0
        gtv show
        # assign an arbitrary but strictly increasing version number
        gtv set 1.22.1
        # 'show current version' is the default command, eg. 1.22.1
        gtv
        # create a new tag with an increased major version and message
        gtv new major -m \"new version description message\"
        # shows tag v2.0.0 with message \"NEW\"
        git show \$(git describe)
        # create a new tag with an increased major version, message and suffix
        gtv new major --message=ALPHA --tag-suffix=-alpha
        # shows tag v3.0.0-alpha with message \"ALPHA\"
        git show \$(git describe)
        # ERROR!!! Not a strictly increaing number
        gtv set 1.0.0
"
}

# show version
function version
{
  echo "git-tag-version version \"$GTV_VERSION\""
}

# get current version tag and print its name, return 'none' if no version tag exists
function get-current-version-tag
{
  # TODO: regex needs fixing for --tag-suffix
  TAG=$(git tag --list -n1 | grep -E "^v[0-9]+.[0-9]+.[0-9]+.*\s+version [0-9]+.[0-9]+.[0-9]+" | tail -n1 | cut -d" " -f1)

  if [ -z "$TAG" ]; then
    TAG="none"
  fi

  echo "$TAG"
}

# print latest version number in a plain format, '1.2.3'
function show
{
  TAG=$(get-current-version-tag)
  echo $TAG | tr -d 'v'

  if [ "$TAG" = "none" ]; then
    exit 1
  fi
}

# print a new strictly increasing version number based on the given version string
# argument 1: version type [major|minor|patch]
# argument 2: current version number string "major.minor.patch"
function strictly-increasing-version
{
  MAJOR=$(echo $2 | cut -d. -f1)
  MINOR=$(echo $2 | cut -d. -f2)
  PATCH=$(echo $2 | cut -d. -f3)

  case $1 in
    major)
    MAJOR=$((MAJOR+1))
    MINOR=0
    PATCH=0
    ;;
    minor)
    MINOR=$((MINOR+1))
    PATCH=0
    ;;
    patch)
    PATCH=$((PATCH+1))
    ;;
    *)
    echo "ERROR: Unsupported version type '$1', use major, minor or patch!"
    exit 1
    ;;
  esac

  echo "$MAJOR.$MINOR.$PATCH"
}

# create a version number tag
# argument 1: short description
# argument 2: version number string "major.minor.patch"
function create-version-tag
{
  if [ "$STRICT" = true ]; then
    ensure-strict-mode
  fi
  git tag -a "v$2${SUFFIX}" -m "version $2: $1" -m "${MESSAGE}"
}

# create new version tag
# argument 1: version type [major|minor|patch]
function new-version
{
  # detect sub-command
  case $1 in
    major|minor|patch)
    CURRENT=$(get-current-version-tag | tr -d 'v')
    NEW=$(strictly-increasing-version $1 $CURRENT)
    echo "Current version:   $CURRENT"
    echo "New $1 version: $NEW"
    create-version-tag $1 $NEW
    ;;
    *)
    echo "ERROR: Unsupported version type '$1', use major, minor or patch!"
    exit 1
    ;;
  esac
}

# check if the given string is a gtv style tag
# argument 1: the tag string to be checked
function is-gtv-tag {
  if [[ "$1" =~ ^v[0-9]+\.[0-9]+\.[0-9]+[^a-zA-Z]?.*$ ]]; then
    return 0
  else
    return 1
  fi
}

# fail if there is a gtv specific version tag on the current commit
function ensure-strict-mode {
  GTVTAGEXISTS=false
  for tag in $(git tag --list --contain $(git rev-parse HEAD)); do
    echo "checking $tag"
    if is-gtv-tag $tag; then
      echo "ERROR: Using strict mode yet there is a version tag on this commit: $tag"
      GTVTAGEXISTS=true
    fi
  done

  if [ "$GTVTAGEXISTS" = true ]; then
    exit 1
  fi
}

# set specific version tag
# argument 1: version number string "major.minor.patch"
function set-version
{
  if ! is-gtv-tag "v$1"; then
    echo "ERROR: '$1' is not a valid git tag version"
    exit 1
  fi

  CURRENT=$(get-current-version-tag | tr -d 'v')

  VERSION_OK=false
  if [ "$CURRENT" == "none" ]; then
    VERSION_OK=true
    CURRENT="0.0.0"
  fi

  CURRENT_MAJOR=$(echo $CURRENT | cut -d. -f1)
  CURRENT_MINOR=$(echo $CURRENT | cut -d. -f2)
  CURRENT_PATCH=$(echo $CURRENT | cut -d. -f3)
  NEW_MAJOR=$(echo $1 | cut -d. -f1)
  NEW_MINOR=$(echo $1 | cut -d. -f2)
  NEW_PATCH=$(echo $1 | cut -d. -f3)

  if [ "$NEW_MAJOR" -gt "$CURRENT_MAJOR" ]; then
    VERSION_OK=true
  fi

  if [[ "$NEW_MAJOR" -eq "$CURRENT_MAJOR"
      && "$NEW_MINOR" -gt "$CURRENT_MINOR" ]]; then
    VERSION_OK=true
  fi

  if [[ "$NEW_MAJOR" -eq "$CURRENT_MAJOR"
      && "$NEW_MINOR" -eq "$CURRENT_MINOR"
      && "$NEW_PATCH" -gt "$CURRENT_PATCH" ]]; then
    VERSION_OK=true
  fi

  if [ "$VERSION_OK" = true ]; then
    echo "New version: $1"
    create-version-tag "manually defined version number" $1
  else
    echo "ERROR: $1 is not a strictly increasing version number. Current is $CURRENT."
    exit 1;
  fi
}

# create an initial 'v0.0.0' version number tag
function init
{
  CURRENT=$(get-current-version-tag | tr -d 'v')

  if [ "$CURRENT" == "none" ]; then
    create-version-tag "initial" "0.0.0"
    echo "Initial version: 0.0.0"
  else
    echo "ERROR: Repository contains a version tag already, $CURRENT."
  fi
}

################################################################################

# defaults for the optional arguments
MESSAGE=""
SUFFIX=""
SUFFIX_DELIMITER=$(git config gtv.suffix-delimiter)
SUFFIX_DELIMITER=${SUFFIX_DELIMITER:--}
STRICT=$(git config gtv.strict-mode)
STRICT=${STRICT:-false}

# get the optional arguments
ARGS=$(getopt -o m:nsx: -l "message:,non-strict,strict,suffix:" -n "getopt.sh" -- "$@");

#Bad arguments
if [ $? -ne 0 ];
then
  exit 1
fi

eval set -- "$ARGS";

while true; do
  case "$1" in
    -n|--non-strict)
      STRICT=false
      shift;
      ;;
    -m|--message)
      shift;
      if [ -n "$1" ]; then
        MESSAGE=$1
        shift;
      fi
      ;;
    -s|--strict)
      STRICT=true
      shift;
      ;;
    -x|--suffix)
      shift;
      if [ -n "$1" ]; then
        SUFFIX="${SUFFIX_DELIMITER}$1"
        shift;
      fi
      ;;
    --)
      shift;
      break;
      ;;
  esac
done

# call the commands
case "$1" in
    "help")
    help
    ;;
    "init")
    init
    ;;
    "show")
    show
    ;;
    "version")
    version
    ;;
    "new")
    new-version $2
    ;;
    "set")
    set-version $2
    ;;
    *)
    show
    ;;
esac
